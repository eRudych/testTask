/*
 * This file is generated by jOOQ.
 */
package com.testTask.db;


import com.testTask.db.tables.User;
import com.testTask.db.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<UserRecord> USER_PKEY = UniqueKeys0.USER_PKEY;
    public static final UniqueKey<UserRecord> USER_LOGIN_KEY = UniqueKeys0.USER_LOGIN_KEY;
    public static final UniqueKey<UserRecord> USER_NICK_KEY = UniqueKeys0.USER_NICK_KEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, "user_pkey", User.USER.ID);
        public static final UniqueKey<UserRecord> USER_LOGIN_KEY = Internal.createUniqueKey(User.USER, "user_login_key", User.USER.LOGIN);
        public static final UniqueKey<UserRecord> USER_NICK_KEY = Internal.createUniqueKey(User.USER, "user_nick_key", User.USER.NICK);
    }
}
